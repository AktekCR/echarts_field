<?php

/**
 * Implementation of hook_field_info()
 */
function echarts_field_field_info() { 
  
  return array( 
    'echarts_json_field' => array( 
      'label' => t('ECharts field'), 
      'description' => t('Implementation of Echart library on a field'),
      'default_widget' => 'echarts_json_field_widget',
      'default_formatter' => 'poutine_maker_poutine_formatter',
    ),
  );

}


/**
 * Implementation of hook_field_widget_info()
 */
function echarts_field_field_widget_info() {
  
  return array(
    'echarts_json_field_widget' => array(
      'label' => t('EChart JSON field'),
      'field types' => array('echarts_json_field'),
    ),
  );

}


/**
 * Implements hook_field_widget_form()
 */
function echarts_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  $field_name = $instance['field_name'];
  $required = $element['#required'];
  $item = &$items[$delta];

  $element += array(
    '#type' => 'fieldset',
  );

  $element['graph_type'] = array(
    '#title' => t('Graph type'),
    '#type' => 'select',
    '#required' => $required,
    '#options' => echarts_load_types(),
    '#default_value' => isset($items[$delta]['graph_type']) ? $items[$delta]['graph_type'] : '',
  );

  $element['json_url'] = array(
    '#title' => t('JSON URL'),
    '#type' => 'textfield',
    '#required' => $required,
    '#default_value' => isset($items[$delta]['json_url']) ? $items[$delta]['json_url'] : '',
  );

  $element['json_structure'] = array(
    '#title' => t('JSON Structure (separated by a comma)'),
    '#type' => 'textfield',
    '#required' => $required,
    '#default_value' => isset($items[$delta]['json_structure']) ? $items[$delta]['json_structure'] : '',
  );

  $element['axis_x'] = array(
    '#title' => t('JSON key field name'),
    '#type' => 'textfield',
    '#required' => $required,
    '#default_value' => isset($items[$delta]['axis_x']) ? $items[$delta]['axis_x'] : '',
  );

  $element['series'] = array(
    '#title' => t('Data Series (separated by a comma)'),
    '#type' => 'textfield',
    '#required' => $required,
    '#default_value' => isset($items[$delta]['series']) ? $items[$delta]['series'] : '',
  );

  $element['series_type'] = array(
    '#title' => t('Data Series Types (separated by a comma). For Linear and Bar Charts'),
    '#type' => 'textfield',
    '#required' => $required,
    '#default_value' => isset($items[$delta]['series_type']) ? $items[$delta]['series_type'] : '',
  );

  $element['series_x'] = array(
    '#title' => t('x-axis (separated by a comma)'),
    '#type' => 'textfield',
    '#required' => $required,
    '#default_value' => isset($items[$delta]['series_x']) ? $items[$delta]['series_x'] : '',
  );

  $element['max_y'] = array(
    '#title' => t('Max y-axis value (For radial and Funnel charts)'),
    '#type' => 'textfield',
    '#default_value' => isset($items[$delta]['max_y']) ? $items[$delta]['max_y'] : '',
  );

  $element['show_average'] = array(
    '#title' => t('Show average of Data? (For bar and Linear chart only)'),
    '#type' => 'radios',
    '#options' => drupal_map_assoc(array(t('Si'), t('No'))),
    '#default_value' => isset($items[$delta]['show_average']) ? $items[$delta]['show_average'] : 'No'
  );

  $element['show_maxMin'] = array(
    '#title' => t('Show Max and Min of Data? (For bar and Linear chart only)'),
    '#type' => 'radios',
    '#options' => drupal_map_assoc(array(t('Si'), t('No'))),
    '#default_value' => isset($items[$delta]['show_maxMin']) ? $items[$delta]['show_maxMin'] : 'No'
  );

  $element['enable_y'] = array(
    '#title' => t('Show axis Y? (For bar and Linear chart only)'),
    '#type' => 'radios',
    '#options' => drupal_map_assoc(array(t('Si'), t('No'))),
    '#default_value' => isset($items[$delta]['enable_y']) ? $items[$delta]['enable_y'] : 'No'
  );

   $element['linear_shadow'] = array(
    '#title' => t('Enable Linear Shadow? (For Linear Chart Only)'),
    '#type' => 'radios',
    '#options' => drupal_map_assoc(array(t('Si'), t('No'))),
    '#default_value' => isset($items[$delta]['linear_shadow']) ? $items[$delta]['linear_shadow'] : 'No'
  );

  $element['stack_bar'] = array(
    '#title' => t('Stack Series of Data? (For bar chart only)'),
    '#type' => 'radios',
    '#options' => drupal_map_assoc(array(t('Si'), t('No'))),
    '#default_value' => isset($items[$delta]['stack_bar']) ? $items[$delta]['stack_bar'] : 'No'
  );

  return $element;

}

/**
 * Implements hook_field_is_empty().
 */
function echarts_field_field_is_empty($item, $field) {
  
  if (empty($item['json_url'])) {
    return TRUE;
  }
  
  return FALSE;

}


/**
 * Implements hook_field_formatter_info().
 */
function echarts_field_field_formatter_info() {
  
  return array(
    'echarts_json_field_graph' => array(
      'label' => t('Default ECharts'),
      'field types' => array('echarts_json_field'),
    ),
  );

}


/**
 * Implements hook_field_formatter_view().
 */
function echarts_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  $element = array();

  switch ($display['type']) {
    case 'echarts_json_field_graph':
      $format_field = 'echarts_field_json_graph';//echarts_field_json_field_graph_format';
      break; 
  }

  foreach ($items as $delta => $item) {
    $item['graph'] = _echarts_field_generate_graph($item);
    $element[$delta] = array(
      '#markup' => theme($format_field, array('item' => $item)),
    );
  }

  return $element;

}


/**
 * Implements hook_theme()
 */
function echarts_field_theme(){

  return array(
    'echarts_field_json_graph' => array(
      'template' => 'theme/echarts_field_json_graph',
      'variables' => array(
        'item' => array(),
      ),
    ),
  );

}


/**
 * This function add js, css and generate html of the graph
 */
function _echarts_field_generate_graph($item){

  module_load_include('inc', 'echarts_field', 'includes/echarts_field');

  $output = '';

  $graph_settings = array();

  //Type of Chart to Create
  $graph_type = $item['graph_type'];
  
  //Data Series 
  $series = explode(',',trim($item['series']));
  
  //Type of Series only for Bar and Line Charts
  $series_type = $item['series_type'] != '' ? explode(',',trim($item['series_type'])) : '-';
  
  //Axis X labels...
  $axisx_labels = $item['series_x'];
  
  //Configuration Charts Variables
  $enable_y = $item['enable_y']; 
  $linear_shadow = $item['linear_shadow'];
  $stack_bar = $item['stack_bar'];
  $show_average = $item['show_average'];
  $show_maxmin = $item['show_maxMin'];
  
  //Read the Json from URL.  
  $json_data = file_get_contents($item['json_url']);

  //Remove blank spaces in Json String
  $patterns = array('/"\s/','/\s"/');
  $replaces = array('"','"');
  $json_data = preg_replace($patterns, $replaces, $json_data);

  //Convert Json string in Json Object
  $json_array = json_decode($json_data);
  

  //Get the Json structure and create the Json Array
  $json_structure = explode(',',trim($item['json_structure']));
  
  foreach ($json_structure as $key => $value) {
     $json_tmp = $json_array->$value;
     $json_array = $json_tmp; 
  }

  //Generic name to the chart.
  $nameg = hash('MD5',microtime(true));
  
  switch ($graph_type) {
    case 'line':
      $axisx_labels = explode(',', trim($axisx_labels));

      $line = echarts_field_generate_settings_bar_line_graph($json_array, $item['axis_x'], 
        $series, 'line',$axisx_labels, '',$enable_y, $linear_shadow, $series_type, '', 
        $show_average, $show_maxmin);

      $graph_settings['echart'][$nameg] = $line;
      break;

   case 'bar':
    $axisx_labels = explode(',',trim($axisx_labels));
      
    $bar = echarts_field_generate_settings_bar_line_graph($json_array, $item['axis_x'],
      $series, 'bar',$axisx_labels, '',$enable_y, $linear_shadow, $series_type, 
      $stack_bar, $show_average, $show_maxmin);

    $graph_settings['echart'][$nameg] = $bar;
    break;

  case 'pie':
    $pie = echarts_field_generate_settings_pie_funnel_graph($json_array, $item['axis_x'],
      $series,'pie', $axisx_labels, '', '');

    $graph_settings['echart'][$nameg] = $pie;
    break;

  case 'funnel':
    $max_y = $item['max_y'];  
    
    $funnel = echarts_field_generate_settings_pie_funnel_graph($json_array, $item['axis_x'],
      $series,'funnel', $axisx_labels, '', $max_y);

    $graph_settings['echart'][$nameg] = $funnel;
    break;

  case 'radar':
    $max_y = $item['max_y'];  

    $axisx_labels = explode(',',trim($axisx_labels));
      
    $radar = echarts_field_generate_settings_radar_graph($json_array, $item['axis_x'],
      $series,'radar', $axisx_labels, $max_y ,'');    

    $graph_settings['echart'][$nameg] = $radar;    
    break;

  case 'treemap':
    $treemap = echarts_field_generate_settings_treemap_graph($json_array, $item['axis_x'],
      $series,'treemap', $axisx_labels, '');
    
    $graph_settings['echart'][$nameg] = $treemap;

    break;

  default:
      $output = '<h3>' . t('This kind of graph is not implemented yet') . '</h3>';
    break;
  }
  
  return render_echarts($graph_settings);

}


/**
 * Implements custom template_preprocess
 */
function template_preprocess_echarts_field_json_graph(&$vars) {

  $vars['graph'] = $vars['item']['graph'];

}
